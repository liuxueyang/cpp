示例 1：

输入：m = 1, n = 2, waitCost = [[1,2]]

输出：3

解释：

最佳路径为：

从第 1 秒开始在单元格 (0, 0)，进入成本为 (0 + 1) * (0 + 1) = 1。
第 1 秒：向右移动到单元格 (0, 1)，进入成本为 (0 + 1) * (1 + 1) = 2。
因此，总成本为 1 + 2 = 3。

示例 2：

输入：m = 2, n = 2, waitCost = [[3,5],[2,4]]

输出：9

解释：

最佳路径为：

从第 1 秒开始在单元格 (0, 0)，进入成本为 (0 + 1) * (0 + 1) = 1。
第 1 秒：向下移动到单元格 (1, 0)，进入成本为 (1 + 1) * (0 + 1) = 2。
第 2 秒：在单元格 (1, 0) 等待，支付 waitCost[1][0] = 2。
第 3 秒：向右移动到单元格 (1, 1)，进入成本为 (1 + 1) * (1 + 1) = 4。
因此，总成本为 1 + 2 + 2 + 4 = 9。

示例 3：

输入：m = 2, n = 3, waitCost = [[6,1,4],[3,2,5]]

输出：16

解释：

最佳路径为：

从第 1 秒开始在单元格 (0, 0)，进入成本为 (0 + 1) * (0 + 1) = 1。
第 1 秒：向右移动到单元格 (0, 1)，进入成本为 (0 + 1) * (1 + 1) = 2。
第 2 秒：在单元格 (0, 1) 等待，支付 waitCost[0][1] = 1。
第 3 秒：向下移动到单元格 (1, 1)，进入成本为 (1 + 1) * (1 + 1) = 4。
第 4 秒：在单元格 (1, 1) 等待，支付 waitCost[1][1] = 2。
第 5 秒：向右移动到单元格 (1, 2)，进入成本为 (1 + 1) * (2 + 1) = 6。
因此，总成本为 1 + 2 + 1 + 4 + 2 + 6 = 16。